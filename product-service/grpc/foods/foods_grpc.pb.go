// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpc/foods/foods.proto

package foods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoodsServiceClient is the client API for FoodsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodsServiceClient interface {
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type foodsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodsServiceClient(cc grpc.ClientConnInterface) FoodsServiceClient {
	return &foodsServiceClient{cc}
}

func (c *foodsServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/foods.FoodsService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodsServiceServer is the server API for FoodsService service.
// All implementations must embed UnimplementedFoodsServiceServer
// for forward compatibility
type FoodsServiceServer interface {
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	mustEmbedUnimplementedFoodsServiceServer()
}

// UnimplementedFoodsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFoodsServiceServer struct {
}

func (UnimplementedFoodsServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedFoodsServiceServer) mustEmbedUnimplementedFoodsServiceServer() {}

// UnsafeFoodsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodsServiceServer will
// result in compilation errors.
type UnsafeFoodsServiceServer interface {
	mustEmbedUnimplementedFoodsServiceServer()
}

func RegisterFoodsServiceServer(s grpc.ServiceRegistrar, srv FoodsServiceServer) {
	s.RegisterService(&FoodsService_ServiceDesc, srv)
}

func _FoodsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foods.FoodsService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodsServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FoodsService_ServiceDesc is the grpc.ServiceDesc for FoodsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoodsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foods.FoodsService",
	HandlerType: (*FoodsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _FoodsService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/foods/foods.proto",
}
