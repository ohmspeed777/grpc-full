// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protobufs/foods/foods.proto

package foods

import (
	common "app/protobufs/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoodsServiceClient is the client API for FoodsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodsServiceClient interface {
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetAllStream(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (FoodsService_GetAllStreamClient, error)
	SendStream(ctx context.Context, opts ...grpc.CallOption) (FoodsService_SendStreamClient, error)
	BiDirectionalStream(ctx context.Context, opts ...grpc.CallOption) (FoodsService_BiDirectionalStreamClient, error)
}

type foodsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodsServiceClient(cc grpc.ClientConnInterface) FoodsServiceClient {
	return &foodsServiceClient{cc}
}

func (c *foodsServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/foods.FoodsService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodsServiceClient) GetAllStream(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (FoodsService_GetAllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FoodsService_ServiceDesc.Streams[0], "/foods.FoodsService/GetAllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &foodsServiceGetAllStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FoodsService_GetAllStreamClient interface {
	Recv() (*Food, error)
	grpc.ClientStream
}

type foodsServiceGetAllStreamClient struct {
	grpc.ClientStream
}

func (x *foodsServiceGetAllStreamClient) Recv() (*Food, error) {
	m := new(Food)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *foodsServiceClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (FoodsService_SendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FoodsService_ServiceDesc.Streams[1], "/foods.FoodsService/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &foodsServiceSendStreamClient{stream}
	return x, nil
}

type FoodsService_SendStreamClient interface {
	Send(*Food) error
	CloseAndRecv() (*GetAllResponse, error)
	grpc.ClientStream
}

type foodsServiceSendStreamClient struct {
	grpc.ClientStream
}

func (x *foodsServiceSendStreamClient) Send(m *Food) error {
	return x.ClientStream.SendMsg(m)
}

func (x *foodsServiceSendStreamClient) CloseAndRecv() (*GetAllResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *foodsServiceClient) BiDirectionalStream(ctx context.Context, opts ...grpc.CallOption) (FoodsService_BiDirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FoodsService_ServiceDesc.Streams[2], "/foods.FoodsService/BiDirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &foodsServiceBiDirectionalStreamClient{stream}
	return x, nil
}

type FoodsService_BiDirectionalStreamClient interface {
	Send(*Food) error
	Recv() (*Food, error)
	grpc.ClientStream
}

type foodsServiceBiDirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *foodsServiceBiDirectionalStreamClient) Send(m *Food) error {
	return x.ClientStream.SendMsg(m)
}

func (x *foodsServiceBiDirectionalStreamClient) Recv() (*Food, error) {
	m := new(Food)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FoodsServiceServer is the server API for FoodsService service.
// All implementations must embed UnimplementedFoodsServiceServer
// for forward compatibility
type FoodsServiceServer interface {
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetAllStream(*common.Empty, FoodsService_GetAllStreamServer) error
	SendStream(FoodsService_SendStreamServer) error
	BiDirectionalStream(FoodsService_BiDirectionalStreamServer) error
	mustEmbedUnimplementedFoodsServiceServer()
}

// UnimplementedFoodsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFoodsServiceServer struct {
}

func (UnimplementedFoodsServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedFoodsServiceServer) GetAllStream(*common.Empty, FoodsService_GetAllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllStream not implemented")
}
func (UnimplementedFoodsServiceServer) SendStream(FoodsService_SendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStream not implemented")
}
func (UnimplementedFoodsServiceServer) BiDirectionalStream(FoodsService_BiDirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectionalStream not implemented")
}
func (UnimplementedFoodsServiceServer) mustEmbedUnimplementedFoodsServiceServer() {}

// UnsafeFoodsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodsServiceServer will
// result in compilation errors.
type UnsafeFoodsServiceServer interface {
	mustEmbedUnimplementedFoodsServiceServer()
}

func RegisterFoodsServiceServer(s grpc.ServiceRegistrar, srv FoodsServiceServer) {
	s.RegisterService(&FoodsService_ServiceDesc, srv)
}

func _FoodsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foods.FoodsService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodsServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodsService_GetAllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodsServiceServer).GetAllStream(m, &foodsServiceGetAllStreamServer{stream})
}

type FoodsService_GetAllStreamServer interface {
	Send(*Food) error
	grpc.ServerStream
}

type foodsServiceGetAllStreamServer struct {
	grpc.ServerStream
}

func (x *foodsServiceGetAllStreamServer) Send(m *Food) error {
	return x.ServerStream.SendMsg(m)
}

func _FoodsService_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FoodsServiceServer).SendStream(&foodsServiceSendStreamServer{stream})
}

type FoodsService_SendStreamServer interface {
	SendAndClose(*GetAllResponse) error
	Recv() (*Food, error)
	grpc.ServerStream
}

type foodsServiceSendStreamServer struct {
	grpc.ServerStream
}

func (x *foodsServiceSendStreamServer) SendAndClose(m *GetAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *foodsServiceSendStreamServer) Recv() (*Food, error) {
	m := new(Food)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FoodsService_BiDirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FoodsServiceServer).BiDirectionalStream(&foodsServiceBiDirectionalStreamServer{stream})
}

type FoodsService_BiDirectionalStreamServer interface {
	Send(*Food) error
	Recv() (*Food, error)
	grpc.ServerStream
}

type foodsServiceBiDirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *foodsServiceBiDirectionalStreamServer) Send(m *Food) error {
	return x.ServerStream.SendMsg(m)
}

func (x *foodsServiceBiDirectionalStreamServer) Recv() (*Food, error) {
	m := new(Food)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FoodsService_ServiceDesc is the grpc.ServiceDesc for FoodsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoodsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foods.FoodsService",
	HandlerType: (*FoodsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _FoodsService_GetAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllStream",
			Handler:       _FoodsService_GetAllStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendStream",
			Handler:       _FoodsService_SendStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiDirectionalStream",
			Handler:       _FoodsService_BiDirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobufs/foods/foods.proto",
}
